{
  "name": "NSP",
  "tagline": "Node Server Pages",
  "body": "# Node Server Pages\r\nNode Server Pages is a server-side script to create dynamic web pages based on Node.js.\r\n\r\n***Node Server Pages is NOT a template engine!***\r\n\r\n- [한국어 문서](README_ko.md)\r\n\r\n## Features\r\n- You can instantly start developing server programming with basic knowledge of JavaScript.\r\n- You can use all the [APIs of Node.js](https://nodejs.org/api/).\r\n- You can use hundreds of [npm modules](https://www.npmjs.com/) out-of-box.\r\n- You can use [COMMON](https://github.com/Hanul/UJS/blob/master/DOC/UJS-COMMON.md) and [NODE](https://github.com/Hanul/UJS/blob/master/DOC/UJS-NODE.md) of [UJS](https://github.com/Hanul/UJS).\r\n- Pages change instantly once you modify `.nsp` pages.\r\n- Built-in support for multi-core CPUs.\r\n\r\n## Install\r\n1. Copy `NSP.js`, `import` folder and `config.json` to wherever you want.\r\n2. Modify `config.json`.\r\n```json\r\n{\r\n\t\"port\": 8080,\r\n\t\"isDevMode\": true,\r\n\t\"rootPath\": \"./\",\r\n    \"uploadURI\": [\"examples/upload_result.nsp\"],\r\n\t\"restURI\": [\"examples/restful\"],\r\n    \"isNotUsingDCBN\" : false\r\n}\r\n```\r\n- `port` is the port of the web server.\r\n- `idDevMode` `true` means development mode. In development mode, resources such as images are not cached.\r\n- `rootPath` specified the root path where `.nsp` files or resources are saved.\r\n- `uploadURI` points to the `URI` to upload to.\r\n- `restURI` specifies the root URI of `REST URI`.\r\n- `isNotUsingDCBN` if set to `true`, {{, }} (double curly braces notation) is not allowed.\r\n\r\n## Run\r\n```\r\nnode NSP.js\r\n```\r\nNow type `http://localhost:8123`, `http://localhost:8123/index.nsp` or `http://localhost:8123/index` in your browser. It's okay to emit `.nsp`.\r\n\r\n## Examples\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>My first NSP page</h1>\r\n\t\t<%\r\n\t\t\tvar msg = 'Hello World!';\r\n\t\t%>\r\n\t\t<p>{{msg}}</p>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n## Syntax\r\n### `<%`, `%>`\r\nAllows server-side JavaScript codes to be embedded.\r\n\r\n### `{{`, `}}`, `<%=`, `%>`\r\nPrints formatted expressions, e.g., `{{expression}}` or `<%=expression %>`. It is equivalent to `<% print(expression); %>`.\r\n\r\n### `<? expression>`, `</?>`, `<? else>`\r\nInterprets statements only if `expression` is `true`. Otherwise, `else` is interpreted.\r\n\r\n```nsp\r\n<%\r\n    var a = true, b = false;\r\n%>\r\n<? a>\r\n    I'm printed.\r\n</?>\r\n<? b>\r\n    I'm not printed.\r\n</?>\r\n<? else>\r\n    I'm printed.\r\n</?>\r\n```\r\n\r\n### `<~ array -> value>`, `</~>`\r\nIterates over an array.\r\n\r\n```nsp\r\n<%\r\n    var arr = [1, 2];\r\n%>\r\n<~ arr -> v>\r\n    {{v}}\r\n</~>\r\n```\r\n\r\n### `<~ data -> value>`, `<~ data -> name: value>`, `</~>`\r\nIterates over an object.\r\n\r\n```nsp\r\n<%\r\n    var data = {\r\n        a : 1,\r\n        b : 2\r\n    };\r\n%>\r\n<~ data -> n: v>\r\n    {{n}} : {{v}}\r\n</~>\r\n```\r\n\r\n## Built-in functions\r\n### print\r\nAdd contents to the `HTML` document using `print` function.\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>My first NSP page</h1>\r\n\t\t<%\r\n\t\t\tprint('Hello World!');\r\n\t\t%>\r\n\t</body>\r\n</html>\r\n```\r\nOutput\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>My first NSP page</h1>\r\n\t\tHello World!\r\n\t</body>\r\n</html>\r\n```\r\n\r\nYou can also print out JSON objects to make JSON-based APIs.\r\n\r\n```nsp\r\n<%\r\n\tvar data = {\r\n\t\ta : 1,\r\n\t\tb : 2,\r\n\t\tc : 3\r\n\t};\r\n\t\r\n\tprint(data); // or {{data}}\r\n%>\r\n```\r\nOutput\r\n\r\n```json\r\n{\"a\":1,\"b\":2,\"c\":3}\r\n```\r\n\r\n### include\r\nYou can have another `.nsp` file in the page using `include` function.\r\n\r\n- If a variable was registered using `var` keyword, it is only visible in current page.\r\n- If a variable is used in multiple pages with `include`, you can use it by assigning values to `self` that are shared between pages in current request.\r\n\r\n`include.nsp`\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<% include('include/top.nsp'); %>\r\n\t\t<h1>My first NSP page</h1>\r\n\t\t<% include('include/bottom.nsp'); %>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n`include/top.nsp`\r\n\r\n```nsp\r\n<%\r\n\tvar local = 'Welcome!';\r\n\t\r\n\tself.msg = 'Hello World! ' + local;\r\n%>\r\n```\r\n\r\n`include/bottom.nsp`\r\n```nsp\r\n<p>{{self.msg}}</p>\r\n```\r\n\r\nIf you give another function as the second argument of `include` function, you can set the action to be run after the inclusion finishes. Note that the inclusion doesn't start until the sentences that contain `include` function ends.\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<%\r\n    \t\tinclude('include/top.nsp', function() {\r\n    \t\t    console.log(self.msg); // Hello World! Welcome!\r\n    \t\t});\r\n    \t\t\r\n    \t\tconsole.log(self.msg); // undefined\r\n\t\t%>\r\n\t\t<%\r\n\t\t    console.log(self.msg); // Hello World! Welcome!\r\n\t\t%>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nYou can also contain `.js` file to reuse one `.js` file for both server-side and client-side.\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<% include('include/common.js'); %>\r\n\t\t<script src=\"include/common.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n### save/load\r\nSaves or loads a variable. Loaded/saved variables are shared everywhere in the NSP server.\r\n\r\n```nsp\r\n<%\r\n\tsave('sample', 'this is an example.');\r\n\tload('sample'); // this is an example.\r\n\tsave('sample', undefined); // Saving 'undefined' deletes the variable.\r\n%>\r\n```\r\n\r\n### pause/resume\r\nDocument processing is paused for a while in `callback`s with `pause` function when you deal with database, etc.\r\n\r\n```nsp\r\nstart\r\n<%\r\n\tsetTimeout(function() {\r\n\t\r\n\t\tprint('ok');\r\n\t\t\r\n\t\tresume();\r\n\t}, 1000);\r\n\t\r\n\tpause();\r\n%>\r\nend\r\n```\r\n\r\n### cookie\r\nSaves or loads a cookie.\r\n\r\n```nsp\r\n<%\r\n\t// Saves a cookie\r\n\tcookie('sample-cookie', 'this is example.');\r\n\tcookie('sample-cookie', '', 0); // Removes a cookie\r\n\tcookie('sample-cookie', 'this is example.', 10); // Expired in 10 seconds\r\n\tcookie('sample-cookie', 'this is example.', 10, '/'); // Sets path to '/'\r\n\tcookie('sample-cookie', 'this is example.', 10, '/', 'www.example'); // Sets domain to www.example\r\n\t\r\n\t// Loads a cookie\r\n\tcookie('sample-cookie');\r\n%>\r\n```\r\n\r\n#### Sessions example using `cookie`\r\nAn example to implement sessions using `cookie` and `save/load`.\r\n\r\n```nsp\r\n<%\r\n\tvar sessionKey = cookie('session-key');\r\n\t\r\n\tprint(sessionKey);\r\n\t\r\n\tif (sessionKey === undefined) {\r\n\t\tsessionKey = RANDOM_STR(20);\r\n\t}\r\n\t\r\n\tcookie('session-key', sessionKey, 3600);\r\n%>\r\n<p>{{load(sessionKey)}}</p>\r\n<%\r\n\tsave(sessionKey, {\r\n\t\tname : 'YJ Sim',\r\n\t\tage : 28\r\n\t});\r\n%>\r\n```\r\nThe next step could be saving sessions to a file or a database.\r\n\r\n### upload\r\nUploads a file to the `URI` that's specified by `uploadURI` in `config.json`.\r\n\r\n```nsp\r\n<%\r\n    var paramsList;\r\n    \r\n    // Uploaded file is saved in 'upload_temp_files' folder.\r\n\tupload('upload_temp_files', function(_paramsList) {\r\n\t\tparamsList = _paramsList;\r\n\t\tresume();\r\n\t});\r\n\t\r\n\tpause();\r\n%>\r\n<~ paramsList -> params>\r\n\t<p>{{params}}</p>\r\n</~>\r\n```\r\n\r\n### redirect\r\nRedirects the user to the URL specified.\r\n```nsp\r\n<%\r\n    redirect('/main.nsp');\r\n%>\r\n```\r\n```nsp\r\n<%\r\n    redirect('https://github.com/Hanul/NSP');\r\n%>\r\n```\r\n\r\n### escape\r\nA statement with backslash(\\\\) in front of `<%` or `{{` is NOT interpreted. However, since two backslashes(\\\\\\\\) in front of `<%` or `{{` is recognized as a backslash, that statement is interpreted.\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>My first NSP page</h1>\r\n\t\t\r\n\t\t\\<%\r\n\t\t\t// This statement is NOT interpreted.\r\n\t\t\tvar msg = 'Hello World!';\r\n\t\t%>\r\n\t\t\\{{msg}}\r\n\t\t\r\n\t\t\\\\<%\r\n\t\t\t// This statement is interpreted.\r\n\t\t\tvar msg = 'Hello World!';\r\n\t\t%>\r\n\t\t\\\\{{msg}}\r\n\t</body>\r\n</html>\r\n```\r\n\r\n## Built-in Variables\r\n### self.headers\r\nHolds requested HTTP headers.\r\n\r\n### self.method\r\nHolds requested HTTP Method. `ex) GET, POST`\r\n\r\n### self.ip\r\nHolds requested IP address in String form. `ex) 127.0.0.1`\r\n\r\n### self.params\r\nHolds data passed from `form`s, etc.\r\n\r\n`params.nsp`\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>Params Example</h1>\r\n\t\t<form action=\"params_result.nsp\" method=\"POST\">\r\n\t\t\tFirst name: <input type=\"text\" name=\"fname\"><br>\r\n\t\t\tLast name: <input type=\"text\" name=\"lname\"><br>\r\n\t\t\t<input type=\"submit\" value=\"Submit\">\r\n\t\t</form>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n`params_result.nsp`\r\n\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>Params Example</h1>\r\n\t\t<p>\r\n\t\t\t{{self.params}}\r\n\t\t</p>\r\n\t\t<a href=\"params.nsp\">Back</a>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nIf you passed `Sam` as `fname` and `Ple` as `lname`, `self.params` should be `{\"fname\":\"Sam\",\"lname\":\"Ple\"}`.\r\n\r\n### self.subURI\r\nHolds requested sub URI, which is resulted by excluding `restURI` from the request full URI.\r\nIf `restURI` is `sample` and the request URI is `sample/1/edit`, `self.subURI` holds `1/edit`.\r\n\r\n## Samples\r\n- https://github.com/Hanul/nsp-sample-restful\r\n- https://github.com/Hanul/nsp-sample-bbs\r\n- https://github.com/Hanul/nsp-sample-bbs-mysql\r\n- https://github.com/Hanul/nsp-sample-bbs-angularjs\r\n\r\n## Etc.\r\n### Are you familiar with PHP?\r\nInstall [php.js](https://github.com/kvz/phpjs) and use it together with NSP.\r\n```nsp\r\n<!DOCTYPE html>\r\n<html>\r\n\t<body>\r\n\t\t<h1>NSP + php.js</h1>\r\n\t\t<%\r\n\t\t\tvar php = require('phpjs');\r\n\t\t\t\r\n\t\t\tprint(php.sprintf('Hey, %s : )', 'you'));\r\n\t\t\tprint(php.parse_url('mysql://kevin:abcd1234@example.com/databasename')['pass']);\r\n\t\t\tprint(php.strtotime('2 januari 2012, 11:12:13 GMT'));\r\n\t\t%>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n## License\r\n[MIT](LICENSE)\r\n\r\n## Author\r\n[Young Jae Sim](https://github.com/Hanul)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}